-- Create the database
CREATE DATABASE origin_driving_school_db;
USE origin_driving_school_db;

-- 1. Students Table
CREATE TABLE students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    password VARCHAR(255) NOT NULL,         
    license_status VARCHAR(50),
    progress TEXT,
    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 2. Staff Table (admins, instructors, etc.)
CREATE TABLE staff (
    staff_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,   
    role VARCHAR(50) NOT NULL,       
    phone VARCHAR(20)
);

-- 3. Instructors Table (OPTIONAL â€“ if you really need separate details)
CREATE TABLE instructors (
    instructor_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    qualification VARCHAR(100),
    status VARCHAR(50)
);

-- 4. Branches Table
CREATE TABLE branches (
    branch_id INT AUTO_INCREMENT PRIMARY KEY,
    branch_name VARCHAR(100) NOT NULL,
    location VARCHAR(200),
    contact_number VARCHAR(20)
);

-- 5. Courses Table
CREATE TABLE courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2),
    duration INT,
    description TEXT
);

-- 6. Fleet Table
CREATE TABLE fleet (
    vehicle_id INT AUTO_INCREMENT PRIMARY KEY,
    vehicle_name VARCHAR(100) NOT NULL,
    vehicle_model VARCHAR(100),
    vehicle_type VARCHAR(50),
    location VARCHAR(255) NOT NULL
);

-- 7. Classes Table (depends on instructors & fleet)
CREATE TABLE classes (
    class_id INT AUTO_INCREMENT PRIMARY KEY,
    class_name VARCHAR(100) NOT NULL,
    instructor_id INT NOT NULL,
    `date` DATETIME NOT NULL,
    duration TIME NOT NULL,
    location VARCHAR(255) NOT NULL,
    vehicle_id INT,
    FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id) ON DELETE CASCADE,
    FOREIGN KEY (vehicle_id) REFERENCES fleet(vehicle_id) ON DELETE SET NULL
);

-- 8. Invoices Table (depends on students, classes, courses)
CREATE TABLE invoices (
    invoice_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    class_id INT NULL,             
    course_id INT NULL,            
    amount DECIMAL(10, 2) NOT NULL,
    issue_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    due_date DATETIME,
    status VARCHAR(50),
    payment_status ENUM('Pending', 'Paid') DEFAULT 'Pending',
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE
);

-- 9. Payments Table (depends on invoices & students)
CREATE TABLE payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    invoice_id INT,  
    amount DECIMAL(10, 2),
    payment_date DATETIME,
    payment_status ENUM('Pending','Paid','Failed') DEFAULT 'Pending',
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (invoice_id) REFERENCES invoices(invoice_id) ON DELETE CASCADE
);

-- 10. Scheduling Table (depends on classes, students, instructors)
CREATE TABLE schedules (
    schedule_id INT AUTO_INCREMENT PRIMARY KEY,
    class_id INT,
    student_id INT,
    instructor_id INT,
    schedule_time DATETIME,
    FOREIGN KEY (class_id) REFERENCES classes(class_id),
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id)
);

-- 11. Communications Table (depends on staff)
CREATE TABLE communications (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT,
    recipient_id INT,
    message_type VARCHAR(50),
    message_content TEXT,
    send_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES staff(staff_id),
    FOREIGN KEY (recipient_id) REFERENCES staff(staff_id)
);

-- 12. Student Progress Table
CREATE TABLE student_progress (
    progress_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    assessment_date DATETIME,
    score DECIMAL(5, 2),
    feedback TEXT,
    FOREIGN KEY (student_id) REFERENCES students(student_id)
);

-- 13. Admin Dashboard Metrics Table
CREATE TABLE dashboard_metrics (
    metric_id INT AUTO_INCREMENT PRIMARY KEY,
    metric_name VARCHAR(100),
    metric_value DECIMAL(10, 2),
    metric_date DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 14. Email Logs Table
CREATE TABLE email_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    recipient_email VARCHAR(255) NOT NULL,
    subject VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- 15. Instructor Performance Table (updated, student_id no longer has FK)
CREATE TABLE instructor_performance (
    performance_id INT AUTO_INCREMENT PRIMARY KEY,
    instructor_id INT NOT NULL,
    student_id INT,  -- now just stores an ID, not restricted by FK
    class_id INT,    -- optional: feedback for which class
    rating INT CHECK (rating BETWEEN 1 AND 5), -- 1=poor, 5=excellent
    comments TEXT,
    feedback_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (instructor_id) REFERENCES instructors(instructor_id),
    FOREIGN KEY (class_id) REFERENCES classes(class_id)
);


